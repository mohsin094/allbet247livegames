<?php

namespace common\models;

use Yii;
use \common\components\Tools;

/**
 * This is the model class for collection "sessions".
 *
 * @property \MongoDB\BSON\ObjectID|string $_id
 */
class Sessions extends \yii\mongodb\ActiveRecord
{
    public $_records = [];
    public function begin($key)
    {
        $this->_records = self::find()->where(['token' => $key])->indexBy('session_key')->all();
        return $this;
    }

    public function get($key)
    {
        if(isset($this->_records[$key])) {
            return $this->_records[$key]->session_value;
        }

        return null;
    }

    public function set($key, $value)
    {
        if(!empty($this->_records)) {
            if($this->get($key) !== null) {
                $this->_records[$key]->session_value = $value;
                $this->_records[$key]->save();
                return true;
            }else {
                $model = $this;
                $model->token = $this->token;
                $model->session_key = $key;
                $model->session_value = $value;
                $model->save();
                $this->begin($this->token);
                return true;
            }
        }else {
            $model = $this;
            $model->token = \Yii::$app->security->generateRandomString();
            $model->session_key = $key;
            $model->session_value = $value;
            $model->save();
            $this->begin($this->token);
        
            return true;
        }

        return false;
    }

    public function has($key)
    {
        return isset($this->_records[$key]);
    }

    public function remove($key)
    {
        Sessions::deleteAll(['token' => $this->token, 'session_key' => $key]);
        $this->begin($this->token);
        return true;
    }

    public function destroyAll()
    {
        Sessions::deleteAll(['token' => $this->token]);
        $this->_records = [];
        return true;
    }
    /**
    * {@inheritdoc}
    */
    public function rules()
    {
        return [
            [['token', 'session_key'], 'required'],
            [['token', 'session_key', 'session_value', 'exp', 'user_id'], 'string', 'max' => 255],
        ];
    }

    public function beforeValidate()
    {
        $this->session_value = (string) $this->session_value;
        $this->session_key = (string) $this->session_key;
        $this->token = (string) $this->token;
        $this->user_id = (\Yii::$app->user->isGuest) ? null : (string) \Yii::$app->user->id;

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
        /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'token' => 'Token',
            'user_id' => 'User',
            'session_key' => 'Session Key',
            'session_value' => 'Session Value',
            'exp' => 'Exp'
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function collectionName()
    {
        return [\Yii::$app->params['mongodbDbName'], 'sessions'];
    }

    /**
     * {@inheritdoc}
     */
    public function attributes()
    {
        return [
            '_id',
            'token',
            'session_key',
            'session_value',
            'exp',
            'user_id'
        ];
    }


}
